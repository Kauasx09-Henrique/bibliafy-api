const fs = require('fs');
const db = require('./src/config/database'); // Certifique-se que o caminho est√° correto

async function main() {
  console.log('‚ñ∂Ô∏è  Iniciando o processo de seeding do banco de dados na Render...');
  const client = await db.pool.connect();

  try {
    // 1. Cria a estrutura de tabelas (s√≥ se n√£o existirem)
    await createTables(client);

    // 2. Popula a tabela de livros (s√≥ se estiver vazia)
    await seedBooks(client, './nvi.json');

    // 3. Adiciona as vers√µes da B√≠blia, uma por uma, SEM APAGAR AS EXISTENTES.
    // Se a NVI j√° estiver no banco, ele vai pular.
    await seedVersion(client, './nvi.json', 'NVI', 'Nova Vers√£o Internacional');

    // Ele vai verificar a ACF e, se n√£o existir, vai adicion√°-la.
    await seedVersion(client, './acf.json', 'ACF', 'Almeida Corrigida Fiel');

    // Voc√™ pode adicionar mais vers√µes aqui no futuro...

    console.log('\nüéâ PROCESSO DE SEEDING CONCLU√çDO!');

  } catch (error) {
    console.error('‚ùå Ocorreu um erro geral durante o seeding:', error);
  } finally {
    client.release();
    await db.pool.end();
    console.log('üîå Conex√£o com o banco de dados fechada.');
  }
}

/**
 * Insere uma vers√£o completa, APENAS SE OS VERS√çCULOS DELA N√ÉO EXISTIREM.
 */
async function seedVersion(client, filePath, abbrev, name) {
  console.log(`\n--- Processando vers√£o: ${name} (${abbrev}) ---`);

  // 1. Garante que a vers√£o exista na tabela 'versions' e pega o ID dela.
  console.log(`üìù Registrando a vers√£o "${name}"...`);
  await client.query(
    `INSERT INTO versions (abbreviation, name) VALUES ($1, $2) ON CONFLICT (abbreviation) DO NOTHING;`,
    [abbrev, name]
  );
  const { rows } = await client.query('SELECT id FROM versions WHERE abbreviation = $1', [abbrev]);
  const versionId = rows[0].id;
  console.log(`‚úÖ Vers√£o "${abbrev}" tem o ID: ${versionId}.`);

  // 2. VERIFICA se j√° existem vers√≠culos para esta vers√£o no banco.
  console.log(`üîé Verificando se a vers√£o ${abbrev} j√° est√° populada...`);
  const checkResult = await client.query('SELECT 1 FROM verses WHERE version_id = $1 LIMIT 1', [versionId]);

  if (checkResult.rows.length > 0) {
    // Se a consulta retornar qualquer linha, significa que os vers√≠culos j√° existem.
    console.log(`‚úÖ A vers√£o ${abbrev} j√° existe no banco de dados. Pulando.`);
    return; // Pula para a pr√≥xima vers√£o
  }

  // 3. Se chegou at√© aqui, a vers√£o n√£o tem vers√≠culos. Vamos inserir.
  console.log(`üìñ Lendo o arquivo ${filePath}...`);
  const fileContent = fs.readFileSync(filePath, 'utf8');
  const bibleData = JSON.parse(fileContent.replace(/^\uFEFF/, ''));

  console.log(`üìú Inserindo vers√≠culos da ${abbrev}... (Isso pode ser demorado)`);
  let verseCount = 0;
  for (const [index, book] of bibleData.entries()) {
    const bookId = index + 1;
    for (let i = 0; i < book.chapters.length; i++) {
      const chapterNum = i + 1;
      for (let j = 0; j < book.chapters[i].length; j++) {
        const verseNum = j + 1;
        const verseText = book.chapters[i][j];
        await client.query(
          'INSERT INTO verses (book_id, version_id, chapter, verse, text) VALUES ($1, $2, $3, $4, $5)',
          [bookId, versionId, chapterNum, verseNum, verseText]
        );
        verseCount++;
      }
    }
    // Mostra o progresso no console
    process.stdout.write(`\r   -> Livro processado: ${book.name} (${verseCount} vers√≠culos)`);
  }
  console.log(`\n‚úÖ ${verseCount} vers√≠culos da vers√£o ${abbrev} inseridos!`);
}


// Fun√ß√µes de apoio (n√£o precisam de altera√ß√£o)
async function createTables(client) {
  console.log('üèóÔ∏è  Verificando e criando tabelas se necess√°rio...');
  await client.query(`
    CREATE TABLE IF NOT EXISTS versions (
      id SERIAL PRIMARY KEY,
      abbreviation VARCHAR(10) UNIQUE NOT NULL,
      name VARCHAR(100) NOT NULL
    );
  `);
  await client.query(`
    CREATE TABLE IF NOT EXISTS books (
      id INT PRIMARY KEY,
      testament_id INT NOT NULL,
      "name" VARCHAR(100) NOT NULL,
      abbreviation VARCHAR(10) NOT NULL
    );
  `);
  await client.query(`
    CREATE TABLE IF NOT EXISTS verses (
      id SERIAL PRIMARY KEY,
      book_id INT REFERENCES books(id) ON DELETE CASCADE,
      version_id INT REFERENCES versions(id) ON DELETE CASCADE,
      chapter INT NOT NULL,
      verse INT NOT NULL,
      "text" TEXT NOT NULL,
      UNIQUE(book_id, chapter, verse, version_id)
    );
  `);
  console.log('‚úÖ Estrutura das tabelas verificada.');
}

async function seedBooks(client, referenceFilePath) {
  console.log('üìö Verificando a tabela de livros...');
  const { rows } = await client.query('SELECT COUNT(*) FROM books');
  if (rows[0].count > 0) {
    console.log('‚úÖ Tabela de livros j√° populada. Pulando...');
    return;
  }
  console.log('üìñ Lendo arquivo de refer√™ncia para os livros...');
  const fileContent = fs.readFileSync(referenceFilePath, 'utf8');
  const bibleData = JSON.parse(fileContent.replace(/^\uFEFF/, ''));
  console.log('‚è≥ Inserindo os 66 livros...');
  for (const [index, book] of bibleData.entries()) {
    const bookId = index + 1;
    const testamentId = book.testament === 'VT' ? 1 : 2;
    await client.query('INSERT INTO books (id, testament_id, name, abbreviation) VALUES ($1, $2, $3, $4)', [bookId, testamentId, book.name, book.abbrev]);
  }
  console.log('‚úÖ Livros inseridos com sucesso!');
}

// Inicia o script
main();